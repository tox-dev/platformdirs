name: check
on:
  workflow_dispatch:
  push:
    branches: ["main"]
    tags-ignore: ["**"]
  pull_request:
  schedule:
    - cron: "0 8 * * *"

concurrency:
  group: check-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: test ${{ matrix.py }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        py:
          - "pypy3.10" # ahead to start it earlier because takes longer
          - "3.13"
          - "3.12"
          - "3.11"
          - "3.10"
          - "3.9"
          - "3.8"
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Add .local/bin to Windows PATH
        if: runner.os == 'Windows'
        shell: bash
        run: echo "$USERPROFILE/.local/bin" >> $GITHUB_PATH
      - name: install hatch
        run: uv tool install --python-preference only-managed --python 3.13 hatch
      - name: install Python
        run: uv python install --python-preference only-managed ${{ matrix.py }}
      - name: Pick environment to run
        run: |
          import codecs; import os
          py = "${{ matrix.py }}"
          py = "test.{}".format(py if py.startswith("pypy") else f"py{py}")
          print(f"Picked {py}")
          with codecs.open(os.environ["GITHUB_ENV"], mode="a", encoding="utf-8") as file_handler:
              file_handler.write(f"FORCE_COLOR=1\nENV={py}\n")
        shell: python
      - name: Setup test environment
        run: |
          hatch -v env create ${ENV}
          hatch run ${ENV}:uv pip tree
        shell: bash
      - name: Run test suite
        run: hatch -v run ${ENV}:run
        env:
          PYTEST_ADDOPTS: "-vv --durations=20"
          CI_RUN: "yes"
        shell: bash
      - name: Rename coverage report file
        run: |
          import os; import sys;
          os.rename(f"report{os.sep}.coverage.${{ matrix.py }}", f"report{os.sep}.coverage.${{ matrix.py }}-{sys.platform}")
        shell: python
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: coverage-${{ matrix.os }}-${{ matrix.py }}
          path: "report/.coverage.*"
          retention-days: 3

  coverage:
    name: Combine coverage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Let us have colors
        run: echo "FORCE_COLOR=true" >> "$GITHUB_ENV"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: install hatch
        run: uv tool install --python-preference only-managed --python 3.13 hatch
      - name: Setup coverage tool
        run: |
          hatch -v env create coverage
          hatch run coverage:pip freeze
      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          path: report
          pattern: coverage-*
          merge-multiple: true
      - name: Combine and report coverage
        run: hatch run coverage:run
      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: report/html

  check:
    name: ${{ matrix.env.name }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        env:
          - { "name": "default", "target": "show" }
          - { "name": "type", "target": "run" }
          - { "name": "docs", "target": "build" }
          - { "name": "readme", "target": "run" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Add .local/bin to Windows PATH
        if: runner.os == 'Windows'
        shell: bash
        run: echo "$USERPROFILE/.local/bin" >> $GITHUB_PATH
      - name: install hatch
        run: uv tool install --python-preference only-managed --python 3.13 hatch
      - name: Setup ${{ matrix.env.name }}
        run: |
          hatch -v env create ${{ matrix.env.name }}
          hatch run ${{ matrix.env.name }}:pip freeze
      - name: Run ${{ matrix.env.name }}
        run: hatch -v run ${{ matrix.env.name }}:${{ matrix.env.target }}
